
001_HAL_CANBUS_NORMAL_MODE_BOARD2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003024  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000104  2000000c  0800321c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000110  0800321c  00020110  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d28c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001cf3  00000000  00000000  0002d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c58  00000000  00000000  0002efc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b60  00000000  00000000  0002fc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000060cb  00000000  00000000  00030778  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003d96  00000000  00000000  00036843  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a5d9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003344  00000000  00000000  0003a658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031d0 	.word	0x080031d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080031d0 	.word	0x080031d0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fbdb 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f845 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8eb 	bl	80006fc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000526:	f000 f8b3 	bl	8000690 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterConfig(&hcan1, CAN_ID_EXT, CAN_FILTER_ENABLE, 0, CAN_FILTER_FIFO0, CAN_FILTERMODE_IDLIST, CAN_FILTERSCALE_32BIT, 14, 0x1F45DA12, 0x1F45DA12, 0x1FFFFFF0, 0x1FFFFFF0);
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <main+0x8c>)
 800052c:	9307      	str	r3, [sp, #28]
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <main+0x8c>)
 8000530:	9306      	str	r3, [sp, #24]
 8000532:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <main+0x90>)
 8000534:	9305      	str	r3, [sp, #20]
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <main+0x90>)
 8000538:	9304      	str	r3, [sp, #16]
 800053a:	230e      	movs	r3, #14
 800053c:	9303      	str	r3, [sp, #12]
 800053e:	2301      	movs	r3, #1
 8000540:	9302      	str	r3, [sp, #8]
 8000542:	2301      	movs	r3, #1
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2300      	movs	r3, #0
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	2201      	movs	r2, #1
 800054e:	2104      	movs	r1, #4
 8000550:	4815      	ldr	r0, [pc, #84]	; (80005a8 <main+0x94>)
 8000552:	f002 fd91 	bl	8003078 <CAN_FilterConfig>
  CAN_FilterConfig(&hcan1, CAN_ID_STD, CAN_FILTER_ENABLE, 1, CAN_FILTER_FIFO0, CAN_FILTERMODE_IDMASK, CAN_FILTERSCALE_32BIT, 14, 0x0123, 0x0000, 0x07FF, 0x0000);
 8000556:	2300      	movs	r3, #0
 8000558:	9307      	str	r3, [sp, #28]
 800055a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800055e:	9306      	str	r3, [sp, #24]
 8000560:	2300      	movs	r3, #0
 8000562:	9305      	str	r3, [sp, #20]
 8000564:	f240 1323 	movw	r3, #291	; 0x123
 8000568:	9304      	str	r3, [sp, #16]
 800056a:	230e      	movs	r3, #14
 800056c:	9303      	str	r3, [sp, #12]
 800056e:	2301      	movs	r3, #1
 8000570:	9302      	str	r3, [sp, #8]
 8000572:	2300      	movs	r3, #0
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2300      	movs	r3, #0
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	2201      	movs	r2, #1
 800057e:	2100      	movs	r1, #0
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <main+0x94>)
 8000582:	f002 fd79 	bl	8003078 <CAN_FilterConfig>
  //  Enable interrupts.
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000586:	2102      	movs	r1, #2
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <main+0x94>)
 800058a:	f000 ffec 	bl	8001566 <HAL_CAN_ActivateNotification>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <main+0x84>
  {
  	Error_Handler();
 8000594:	f000 f91c 	bl	80007d0 <Error_Handler>
  }
  CAN_Start(&hcan1);
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <main+0x94>)
 800059a:	f002 fd45 	bl	8003028 <CAN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x8a>
 80005a0:	1ffffff0 	.word	0x1ffffff0
 80005a4:	1f45da12 	.word	0x1f45da12
 80005a8:	20000068 	.word	0x20000068

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2234      	movs	r2, #52	; 0x34
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fe00 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4a2c      	ldr	r2, [pc, #176]	; (8000688 <SystemClock_Config+0xdc>)
 80005d6:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <SystemClock_Config+0xdc>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <SystemClock_Config+0xdc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <SystemClock_Config+0xe0>)
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <SystemClock_Config+0xe0>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <SystemClock_Config+0xe0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000620:	23b4      	movs	r3, #180	; 0xb4
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff73 	bl	8002520 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000640:	f000 f8c6 	bl	80007d0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000644:	f001 fc2e 	bl	8001ea4 <HAL_PWREx_EnableOverDrive>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800064e:	f000 f8bf 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2105      	movs	r1, #5
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fc67 	bl	8001f44 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800067c:	f000 f8a8 	bl	80007d0 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_CAN1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_CAN1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_CAN1_Init+0x64>)
 800069c:	2214      	movs	r2, #20
 800069e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006b2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_CAN1_Init+0x64>)
 80006e2:	f000 fb39 	bl	8000d58 <HAL_CAN_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f870 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000068 	.word	0x20000068
 80006f8:	40006400 	.word	0x40006400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4a2b      	ldr	r2, [pc, #172]	; (80007c4 <MX_GPIO_Init+0xc8>)
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_GPIO_Init+0xc8>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_GPIO_Init+0xc8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <MX_GPIO_Init+0xc8>)
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_GPIO_Init+0xc8>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_GPIO_Init+0xc8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4a1d      	ldr	r2, [pc, #116]	; (80007c4 <MX_GPIO_Init+0xc8>)
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_GPIO_Init+0xc8>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_GPIO_Init+0xc8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2181      	movs	r1, #129	; 0x81
 800076a:	4817      	ldr	r0, [pc, #92]	; (80007c8 <MX_GPIO_Init+0xcc>)
 800076c:	f001 fb5c 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000776:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <MX_GPIO_Init+0xd0>)
 8000788:	f001 f9a4 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_14;
 800078c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <MX_GPIO_Init+0xcc>)
 80007a6:	f001 f995 	bl	8001ad4 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2028      	movs	r0, #40	; 0x28
 80007b0:	f001 f966 	bl	8001a80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f001 f97f 	bl	8001ab8 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40020800 	.word	0x40020800

080007d0 <Error_Handler>:

void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <Error_Handler+0x6>

080007d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  /* USER CODE END Error_Handler_Debug */
}

/* USER CODE BEGIN 4 */

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]


}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]



}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]


}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <HAL_CAN_TxMailbox0AbortCallback>:
void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]


}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <HAL_CAN_TxMailbox1AbortCallback>:
void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]


}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <HAL_CAN_TxMailbox2AbortCallback>:
void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]


}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

	CAN_Rx(&hcan1,CAN_RX_FIFO0);
 8000858:	2100      	movs	r1, #0
 800085a:	4828      	ldr	r0, [pc, #160]	; (80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800085c:	f002 fbf4 	bl	8003048 <CAN_Rx>

		if(RxData[0] %3 == 1){
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000866:	fba3 1302 	umull	r1, r3, r3, r2
 800086a:	0859      	lsrs	r1, r3, #1
 800086c:	460b      	mov	r3, r1
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	440b      	add	r3, r1
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b01      	cmp	r3, #1
 8000878:	d10b      	bne.n	8000892 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2101      	movs	r1, #1
 800087e:	4822      	ldr	r0, [pc, #136]	; (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000880:	f001 fad2 	bl	8001e28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800088a:	481f      	ldr	r0, [pc, #124]	; (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800088c:	f001 facc 	bl	8001e28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7, GPIO_PIN_RESET);
		}


}
 8000890:	e030      	b.n	80008f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
		else if(RxData[0] %3 == 2){
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000898:	fba3 1302 	umull	r1, r3, r3, r2
 800089c:	0859      	lsrs	r1, r3, #1
 800089e:	460b      	mov	r3, r1
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	440b      	add	r3, r1
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d10b      	bne.n	80008c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	4815      	ldr	r0, [pc, #84]	; (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80008b2:	f001 fab9 	bl	8001e28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f244 0101 	movw	r1, #16385	; 0x4001
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80008be:	f001 fab3 	bl	8001e28 <HAL_GPIO_WritePin>
}
 80008c2:	e017      	b.n	80008f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
		else if(RxData[0] %3 == 0){
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80008c6:	781a      	ldrb	r2, [r3, #0]
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80008ca:	fba3 1302 	umull	r1, r3, r3, r2
 80008ce:	0859      	lsrs	r1, r3, #1
 80008d0:	460b      	mov	r3, r1
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	440b      	add	r3, r1
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10a      	bne.n	80008f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80008e6:	f001 fa9f 	bl	8001e28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2181      	movs	r1, #129	; 0x81
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80008f0:	f001 fa9a 	bl	8001e28 <HAL_GPIO_WritePin>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000068 	.word	0x20000068
 8000900:	20000060 	.word	0x20000060
 8000904:	aaaaaaab 	.word	0xaaaaaaab
 8000908:	40020400 	.word	0x40020400

0800090c <HAL_CAN_RxFifo0FullCallback>:
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]


}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]


}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <HAL_CAN_RxFifo1FullCallback>:
void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]


}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <HAL_CAN_SleepCallback>:
void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan){
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]


}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <HAL_CAN_WakeUpFromRxMsgCallback>:
void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]


}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]


}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 f9bf 	bl	8000d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40002000 	.word	0x40002000

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009e6:	2007      	movs	r0, #7
 80009e8:	f001 f83f 	bl	8001a6a <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_CAN_MspInit+0x94>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d134      	bne.n	8000a84 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a64:	2309      	movs	r3, #9
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <HAL_CAN_MspInit+0x9c>)
 8000a70:	f001 f830 	bl	8001ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */
    /* CAN1 interrupt Init */
    //HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 1);
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2100      	movs	r1, #0
 8000a78:	2014      	movs	r0, #20
 8000a7a:	f001 f801 	bl	8001a80 <HAL_NVIC_SetPriority>
    //HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 1);
    //HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 1);

    //HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a7e:	2014      	movs	r0, #20
 8000a80:	f001 f81a 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
    //HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
    //HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40006400 	.word	0x40006400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	202d      	movs	r0, #45	; 0x2d
 8000aae:	f000 ffe7 	bl	8001a80 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ab2:	202d      	movs	r0, #45	; 0x2d
 8000ab4:	f001 f800 	bl	8001ab8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <HAL_InitTick+0xa4>)
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_InitTick+0xa4>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_InitTick+0xa4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad4:	f107 0210 	add.w	r2, r7, #16
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fb36 	bl	8002150 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ae4:	f001 fb20 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <HAL_InitTick+0xa8>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	0c9b      	lsrs	r3, r3, #18
 8000af8:	3b01      	subs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_InitTick+0xac>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_InitTick+0xb0>)
 8000b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_InitTick+0xac>)
 8000b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b08:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_InitTick+0xac>)
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_InitTick+0xac>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_InitTick+0xac>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <HAL_InitTick+0xac>)
 8000b1e:	f001 ff9d 	bl	8002a5c <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_InitTick+0xac>)
 8000b2a:	f001 fff1 	bl	8002b10 <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	431bde83 	.word	0x431bde83
 8000b44:	200000c4 	.word	0x200000c4
 8000b48:	40002000 	.word	0x40002000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000baa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bae:	f001 f955 	bl	8001e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	481f      	ldr	r0, [pc, #124]	; (8000c34 <EXTI15_10_IRQHandler+0x90>)
 8000bb8:	f001 f91e 	bl	8001df8 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d033      	beq.n	8000c2a <EXTI15_10_IRQHandler+0x86>
  	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8000bc2:	bf00      	nop
 8000bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc8:	481a      	ldr	r0, [pc, #104]	; (8000c34 <EXTI15_10_IRQHandler+0x90>)
 8000bca:	f001 f915 	bl	8001df8 <HAL_GPIO_ReadPin>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f7      	bne.n	8000bc4 <EXTI15_10_IRQHandler+0x20>
  	  for(int i=0; i<2000000; i++);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	e002      	b.n	8000be0 <EXTI15_10_IRQHandler+0x3c>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <EXTI15_10_IRQHandler+0x94>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	ddf8      	ble.n	8000bda <EXTI15_10_IRQHandler+0x36>
  	  //HAL_Delay(100);
  	  count++;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <EXTI15_10_IRQHandler+0x98>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <EXTI15_10_IRQHandler+0x98>)
 8000bf2:	701a      	strb	r2, [r3, #0]
  	  TxData[0]=count;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <EXTI15_10_IRQHandler+0x98>)
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <EXTI15_10_IRQHandler+0x9c>)
 8000bfa:	701a      	strb	r2, [r3, #0]
  	  CAN_Tx(&hcan1, CAN_ID_STD, 0x156, 0, CAN_RTR_DATA, 1, TxData);
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <EXTI15_10_IRQHandler+0x9c>)
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2301      	movs	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	2300      	movs	r3, #0
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8000c0e:	2100      	movs	r1, #0
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <EXTI15_10_IRQHandler+0xa0>)
 8000c12:	f002 f9d1 	bl	8002fb8 <CAN_Tx>
        for(int i=0; i<10000000; i++);
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	e002      	b.n	8000c22 <EXTI15_10_IRQHandler+0x7e>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <EXTI15_10_IRQHandler+0xa4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	ddf8      	ble.n	8000c1c <EXTI15_10_IRQHandler+0x78>
        //  HAL_Delay(10);
    }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020800 	.word	0x40020800
 8000c38:	001e847f 	.word	0x001e847f
 8000c3c:	20000028 	.word	0x20000028
 8000c40:	20000058 	.word	0x20000058
 8000c44:	20000068 	.word	0x20000068
 8000c48:	0098967f 	.word	0x0098967f

08000c4c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c52:	f001 ffcd 	bl	8002bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000c4 	.word	0x200000c4

08000c60 <CAN1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void CAN1_TX_IRQHandler(void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <CAN1_TX_IRQHandler+0x10>)
 8000c66:	f000 fca4 	bl	80015b2 <HAL_CAN_IRQHandler>


}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000068 	.word	0x20000068

08000c74 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <CAN1_RX0_IRQHandler+0x10>)
 8000c7a:	f000 fc9a 	bl	80015b2 <HAL_CAN_IRQHandler>

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000068 	.word	0x20000068

08000c88 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <CAN1_RX1_IRQHandler+0x10>)
 8000c8e:	f000 fc90 	bl	80015b2 <HAL_CAN_IRQHandler>

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000068 	.word	0x20000068

08000c9c <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <CAN1_SCE_IRQHandler+0x10>)
 8000ca2:	f000 fc86 	bl	80015b2 <HAL_CAN_IRQHandler>

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000068 	.word	0x20000068

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 feb4 	bl	8001a6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	200f      	movs	r0, #15
 8000d04:	f7ff fec8 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe4e 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	2000010c 	.word	0x2000010c

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000010c 	.word	0x2000010c

08000d58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e0ec      	b.n	8000f44 <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fe3e 	bl	80009f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	6812      	ldr	r2, [r2, #0]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	f042 0201 	orr.w	r2, r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d8c:	f7ff ffd8 	bl	8000d40 <HAL_GetTick>
 8000d90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d92:	e012      	b.n	8000dba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d94:	f7ff ffd4 	bl	8000d40 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d90b      	bls.n	8000dba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2205      	movs	r2, #5
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e0c4      	b.n	8000f44 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0e5      	beq.n	8000d94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	6812      	ldr	r2, [r2, #0]
 8000dd2:	f022 0202 	bic.w	r2, r2, #2
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd8:	f7ff ffb2 	bl	8000d40 <HAL_GetTick>
 8000ddc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dde:	e012      	b.n	8000e06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000de0:	f7ff ffae 	bl	8000d40 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b0a      	cmp	r3, #10
 8000dec:	d90b      	bls.n	8000e06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e09e      	b.n	8000f44 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1e5      	bne.n	8000de0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e1b      	ldrb	r3, [r3, #24]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7e5b      	ldrb	r3, [r3, #25]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d108      	bne.n	8000e58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	6812      	ldr	r2, [r2, #0]
 8000e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7e9b      	ldrb	r3, [r3, #26]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d108      	bne.n	8000e82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	f022 0220 	bic.w	r2, r2, #32
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7edb      	ldrb	r3, [r3, #27]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d108      	bne.n	8000eac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	f022 0210 	bic.w	r2, r2, #16
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e007      	b.n	8000ebc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	f042 0210 	orr.w	r2, r2, #16
 8000eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7f1b      	ldrb	r3, [r3, #28]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d108      	bne.n	8000ed6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	f042 0208 	orr.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e007      	b.n	8000ee6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	f022 0208 	bic.w	r2, r2, #8
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7f5b      	ldrb	r3, [r3, #29]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d108      	bne.n	8000f00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	f042 0204 	orr.w	r2, r2, #4
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e007      	b.n	8000f10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	f022 0204 	bic.w	r2, r2, #4
 8000f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6891      	ldr	r1, [r2, #8]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68d2      	ldr	r2, [r2, #12]
 8000f1c:	4311      	orrs	r1, r2
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6912      	ldr	r2, [r2, #16]
 8000f22:	4311      	orrs	r1, r2
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6952      	ldr	r2, [r2, #20]
 8000f28:	4311      	orrs	r1, r2
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6852      	ldr	r2, [r2, #4]
 8000f2e:	3a01      	subs	r2, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f64:	7cfb      	ldrb	r3, [r7, #19]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d003      	beq.n	8000f72 <HAL_CAN_ConfigFilter+0x26>
 8000f6a:	7cfb      	ldrb	r3, [r7, #19]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	f040 80be 	bne.w	80010ee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f72:	4b65      	ldr	r3, [pc, #404]	; (8001108 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f74:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f7c:	f043 0201 	orr.w	r2, r3, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d123      	bne.n	800101c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ff6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3248      	adds	r2, #72	; 0x48
 8000ffc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	6892      	ldr	r2, [r2, #8]
 8001008:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001010:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001012:	6979      	ldr	r1, [r7, #20]
 8001014:	3348      	adds	r3, #72	; 0x48
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d122      	bne.n	800106a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	431a      	orrs	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001044:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3248      	adds	r2, #72	; 0x48
 800104a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	6892      	ldr	r2, [r2, #8]
 8001056:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	68d2      	ldr	r2, [r2, #12]
 800105c:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800105e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001060:	6979      	ldr	r1, [r7, #20]
 8001062:	3348      	adds	r3, #72	; 0x48
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	401a      	ands	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001084:	e007      	b.n	8001096 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	431a      	orrs	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	401a      	ands	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010b0:	e007      	b.n	80010c2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d107      	bne.n	80010da <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010e0:	f023 0201 	bic.w	r2, r3, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e006      	b.n	80010fc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
  }
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40006400 	.word	0x40006400

0800110c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d12e      	bne.n	800117e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2202      	movs	r2, #2
 8001124:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001138:	f7ff fe02 	bl	8000d40 <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800113e:	e012      	b.n	8001166 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001140:	f7ff fdfe 	bl	8000d40 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d90b      	bls.n	8001166 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2205      	movs	r2, #5
 800115e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e012      	b.n	800118c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1e5      	bne.n	8001140 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e006      	b.n	800118c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
  }
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d003      	beq.n	80011c0 <HAL_CAN_AddTxMessage+0x2c>
 80011b8:	7ffb      	ldrb	r3, [r7, #31]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	f040 80b4 	bne.w	8001328 <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10a      	bne.n	80011e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 809c 	beq.w	8001318 <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	0e1b      	lsrs	r3, r3, #24
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d907      	bls.n	8001200 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e09a      	b.n	8001336 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001200:	2201      	movs	r2, #1
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	409a      	lsls	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10d      	bne.n	800122e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001220:	431a      	orrs	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3318      	adds	r3, #24
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	440b      	add	r3, r1
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e00f      	b.n	800124e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800123c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8001242:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3318      	adds	r3, #24
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	440b      	add	r3, r1
 800124c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6819      	ldr	r1, [r3, #0]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3318      	adds	r3, #24
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	440b      	add	r3, r1
 800125e:	3304      	adds	r3, #4
 8001260:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	7d1b      	ldrb	r3, [r3, #20]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d111      	bne.n	800128e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3318      	adds	r3, #24
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4413      	add	r3, r2
 800127a:	3304      	adds	r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3318      	adds	r3, #24
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	440b      	add	r3, r1
 800128a:	3304      	adds	r3, #4
 800128c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3307      	adds	r3, #7
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	061a      	lsls	r2, r3, #24
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3306      	adds	r3, #6
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3305      	adds	r3, #5
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	4313      	orrs	r3, r2
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	3204      	adds	r2, #4
 80012b2:	7812      	ldrb	r2, [r2, #0]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	440b      	add	r3, r1
 80012bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3303      	adds	r3, #3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	061a      	lsls	r2, r3, #24
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3302      	adds	r3, #2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	4313      	orrs	r3, r2
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	440b      	add	r3, r1
 80012ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3318      	adds	r3, #24
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f043 0201 	orr.w	r2, r3, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3318      	adds	r3, #24
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	440b      	add	r3, r1
 8001312:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	e00e      	b.n	8001336 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e006      	b.n	8001336 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
  }
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001342:	b480      	push	{r7}
 8001344:	b087      	sub	sp, #28
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001356:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d003      	beq.n	8001366 <HAL_CAN_GetRxMessage+0x24>
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	2b02      	cmp	r3, #2
 8001362:	f040 80f3 	bne.w	800154c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10e      	bne.n	800138a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0e7      	b.n	800155a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d107      	bne.n	80013a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0d8      	b.n	800155a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	331b      	adds	r3, #27
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0204 	and.w	r2, r3, #4
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	331b      	adds	r3, #27
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0d5b      	lsrs	r3, r3, #21
 80013d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	331b      	adds	r3, #27
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	331b      	adds	r3, #27
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4413      	add	r3, r2
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0202 	and.w	r2, r3, #2
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	331b      	adds	r3, #27
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	3304      	adds	r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 020f 	and.w	r2, r3, #15
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	331b      	adds	r3, #27
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	3304      	adds	r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	b2da      	uxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	331b      	adds	r3, #27
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	3304      	adds	r3, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	b29a      	uxth	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	6811      	ldr	r1, [r2, #0]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	440a      	add	r2, r1
 800147a:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	0a12      	lsrs	r2, r2, #8
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3302      	adds	r3, #2
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	6811      	ldr	r1, [r2, #0]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	440a      	add	r2, r1
 8001494:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	0c12      	lsrs	r2, r2, #16
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	3303      	adds	r3, #3
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	6811      	ldr	r1, [r2, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	440a      	add	r2, r1
 80014ae:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	0e12      	lsrs	r2, r2, #24
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	3304      	adds	r3, #4
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	6811      	ldr	r1, [r2, #0]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	440a      	add	r2, r1
 80014c8:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3305      	adds	r3, #5
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	6811      	ldr	r1, [r2, #0]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	440a      	add	r2, r1
 80014e0:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	0a12      	lsrs	r2, r2, #8
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3306      	adds	r3, #6
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	6811      	ldr	r1, [r2, #0]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	440a      	add	r2, r1
 80014fa:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	0c12      	lsrs	r2, r2, #16
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	3307      	adds	r3, #7
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	6811      	ldr	r1, [r2, #0]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	440a      	add	r2, r1
 8001514:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	0e12      	lsrs	r2, r2, #24
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d108      	bne.n	8001538 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	68d2      	ldr	r2, [r2, #12]
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	e007      	b.n	8001548 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	6912      	ldr	r2, [r2, #16]
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	e006      	b.n	800155a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
  }
}
 800155a:	4618      	mov	r0, r3
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001576:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d002      	beq.n	8001584 <HAL_CAN_ActivateNotification+0x1e>
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d109      	bne.n	8001598 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	6951      	ldr	r1, [r2, #20]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e006      	b.n	80015a6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
  }
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b08a      	sub	sp, #40	; 0x28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d07c      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d023      	beq.n	800164a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff f8df 	bl	80007d8 <HAL_CAN_TxMailbox0CompleteCallback>
 800161a:	e016      	b.n	800164a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	e00c      	b.n	800164a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
 8001642:	e002      	b.n	800164a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff f8e5 	bl	8000814 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d024      	beq.n	800169e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff f8bf 	bl	80007ec <HAL_CAN_TxMailbox1CompleteCallback>
 800166e:	e016      	b.n	800169e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	e00c      	b.n	800169e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168a:	2b00      	cmp	r3, #0
 800168c:	d004      	beq.n	8001698 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
 8001696:	e002      	b.n	800169e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff f8c5 	bl	8000828 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d024      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff f89f 	bl	8000800 <HAL_CAN_TxMailbox2CompleteCallback>
 80016c2:	e016      	b.n	80016f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d004      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	e00c      	b.n	80016f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d004      	beq.n	80016ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ea:	e002      	b.n	80016f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff f8a5 	bl	800083c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00c      	beq.n	8001716 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2210      	movs	r2, #16
 8001714:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00b      	beq.n	8001738 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2208      	movs	r2, #8
 8001730:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff f8ea 	bl	800090c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff f87d 	bl	8000850 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001770:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2210      	movs	r2, #16
 8001778:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00b      	beq.n	800179c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2208      	movs	r2, #8
 8001794:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff f8cc 	bl	8000934 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff f8b3 	bl	8000920 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00b      	beq.n	80017dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2210      	movs	r2, #16
 80017d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff f8b6 	bl	8000948 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2208      	movs	r2, #8
 80017f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff f8af 	bl	800095c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d075      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d06c      	beq.n	80018ec <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800186c:	2b00      	cmp	r3, #0
 800186e:	d03d      	beq.n	80018ec <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d038      	beq.n	80018ec <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001880:	2b30      	cmp	r3, #48	; 0x30
 8001882:	d017      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x302>
 8001884:	2b30      	cmp	r3, #48	; 0x30
 8001886:	d804      	bhi.n	8001892 <HAL_CAN_IRQHandler+0x2e0>
 8001888:	2b10      	cmp	r3, #16
 800188a:	d009      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x2ee>
 800188c:	2b20      	cmp	r3, #32
 800188e:	d00c      	beq.n	80018aa <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001890:	e024      	b.n	80018dc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001892:	2b50      	cmp	r3, #80	; 0x50
 8001894:	d018      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x316>
 8001896:	2b60      	cmp	r3, #96	; 0x60
 8001898:	d01b      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x320>
 800189a:	2b40      	cmp	r3, #64	; 0x40
 800189c:	d00f      	beq.n	80018be <HAL_CAN_IRQHandler+0x30c>
            break;
 800189e:	e01d      	b.n	80018dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018a8:	e018      	b.n	80018dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	f043 0310 	orr.w	r3, r3, #16
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018b2:	e013      	b.n	80018dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018bc:	e00e      	b.n	80018dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018c6:	e009      	b.n	80018dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018d0:	e004      	b.n	80018dc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	6992      	ldr	r2, [r2, #24]
 80018e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2204      	movs	r2, #4
 80018f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff f832 	bl	8000970 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	4909      	ldr	r1, [pc, #36]	; (80019b0 <__NVIC_EnableIRQ+0x38>)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	095b      	lsrs	r3, r3, #5
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	f002 021f 	and.w	r2, r2, #31
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	490d      	ldr	r1, [pc, #52]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	4909      	ldr	r1, [pc, #36]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	401a      	ands	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4e:	2101      	movs	r1, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	1e59      	subs	r1, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff4e 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a92:	f7ff ff63 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001a96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	6978      	ldr	r0, [r7, #20]
 8001a9e:	f7ff ffb3 	bl	8001a08 <NVIC_EncodePriority>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff82 	bl	80019b4 <__NVIC_SetPriority>
}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff56 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e165      	b.n	8001dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8154 	bne.w	8001db6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80ae 	beq.w	8001db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4a5c      	ldr	r2, [pc, #368]	; (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001c60:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a57      	ldr	r2, [pc, #348]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d025      	beq.n	8001cee <HAL_GPIO_Init+0x21a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x308>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01f      	beq.n	8001cea <HAL_GPIO_Init+0x216>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x30c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d019      	beq.n	8001ce6 <HAL_GPIO_Init+0x212>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x310>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x20e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x314>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x20a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_GPIO_Init+0x318>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x206>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_GPIO_Init+0x31c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x202>
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	e00c      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e00a      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cda:	2305      	movs	r3, #5
 8001cdc:	e008      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f002 0203 	and.w	r2, r2, #3
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d00:	4934      	ldr	r1, [pc, #208]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d32:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d38:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5c:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db0:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	f67f ae96 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3724      	adds	r7, #36	; 0x24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020c00 	.word	0x40020c00
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40021400 	.word	0x40021400
 8001df0:	40021800 	.word	0x40021800
 8001df4:	40013c00 	.word	0x40013c00

08001df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
 8001e34:	4613      	mov	r3, r2
 8001e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e44:	e003      	b.n	8001e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	041a      	lsls	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d006      	beq.n	8001e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f806 	bl	8001e8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <HAL_PWREx_EnableOverDrive+0x90>)
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_PWREx_EnableOverDrive+0x90>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed0:	f7fe ff36 	bl	8000d40 <HAL_GetTick>
 8001ed4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ed6:	e009      	b.n	8001eec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ed8:	f7fe ff32 	bl	8000d40 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ee6:	d901      	bls.n	8001eec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e01f      	b.n	8001f2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d1ee      	bne.n	8001ed8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f00:	f7fe ff1e 	bl	8000d40 <HAL_GetTick>
 8001f04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f06:	e009      	b.n	8001f1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f08:	f7fe ff1a 	bl	8000d40 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f16:	d901      	bls.n	8001f1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e007      	b.n	8001f2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f28:	d1ee      	bne.n	8001f08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	420e0040 	.word	0x420e0040
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	420e0044 	.word	0x420e0044

08001f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0cc      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b68      	ldr	r3, [pc, #416]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 020f 	and.w	r2, r3, #15
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d20c      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b65      	ldr	r3, [pc, #404]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 020f 	and.w	r2, r3, #15
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0b8      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f98:	4a59      	ldr	r2, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb0:	4a53      	ldr	r2, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4950      	ldr	r1, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d044      	beq.n	8002064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d119      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e07f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d003      	beq.n	8002002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e06f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e067      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4937      	ldr	r1, [pc, #220]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 0203 	bic.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4313      	orrs	r3, r2
 8002032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7fe fe84 	bl	8000d40 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe fe80 	bl	8000d40 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e04f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 020f 	and.w	r2, r3, #15
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d90c      	bls.n	800208c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e032      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4919      	ldr	r1, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b6:	4912      	ldr	r1, [pc, #72]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ca:	f000 f873 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	fa21 f303 	lsr.w	r3, r1, r3
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fcd4 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00
 8002100:	40023800 	.word	0x40023800
 8002104:	080031e8 	.word	0x080031e8
 8002108:	20000000 	.word	0x20000000
 800210c:	20000004 	.word	0x20000004

08002110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800212c:	f7ff fff0 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002130:	4601      	mov	r1, r0
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0a9b      	lsrs	r3, r3, #10
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4a03      	ldr	r2, [pc, #12]	; (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	080031f8 	.word	0x080031f8

08002150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	220f      	movs	r2, #15
 800215e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCC_GetClockConfig+0x60>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b8:	b0a1      	sub	sp, #132	; 0x84
 80021ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d0:	4ba0      	ldr	r3, [pc, #640]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	f200 8193 	bhi.w	8002504 <HAL_RCC_GetSysClockFreq+0x350>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	08002219 	.word	0x08002219
 80021e8:	08002505 	.word	0x08002505
 80021ec:	08002505 	.word	0x08002505
 80021f0:	08002505 	.word	0x08002505
 80021f4:	0800221f 	.word	0x0800221f
 80021f8:	08002505 	.word	0x08002505
 80021fc:	08002505 	.word	0x08002505
 8002200:	08002505 	.word	0x08002505
 8002204:	08002225 	.word	0x08002225
 8002208:	08002505 	.word	0x08002505
 800220c:	08002505 	.word	0x08002505
 8002210:	08002505 	.word	0x08002505
 8002214:	080023a1 	.word	0x080023a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002218:	4b8f      	ldr	r3, [pc, #572]	; (8002458 <HAL_RCC_GetSysClockFreq+0x2a4>)
 800221a:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 800221c:	e175      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800221e:	4b8f      	ldr	r3, [pc, #572]	; (800245c <HAL_RCC_GetSysClockFreq+0x2a8>)
 8002220:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8002222:	e172      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002224:	4b8b      	ldr	r3, [pc, #556]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800222c:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800222e:	4b89      	ldr	r3, [pc, #548]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d056      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223a:	4b86      	ldr	r3, [pc, #536]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	f04f 0400 	mov.w	r4, #0
 8002244:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	ea01 0103 	and.w	r1, r1, r3
 8002250:	ea02 0204 	and.w	r2, r2, r4
 8002254:	460b      	mov	r3, r1
 8002256:	4614      	mov	r4, r2
 8002258:	0160      	lsls	r0, r4, #5
 800225a:	6678      	str	r0, [r7, #100]	; 0x64
 800225c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800225e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002262:	6678      	str	r0, [r7, #100]	; 0x64
 8002264:	015b      	lsls	r3, r3, #5
 8002266:	663b      	str	r3, [r7, #96]	; 0x60
 8002268:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800226c:	1a5b      	subs	r3, r3, r1
 800226e:	eb64 0402 	sbc.w	r4, r4, r2
 8002272:	01a0      	lsls	r0, r4, #6
 8002274:	65f8      	str	r0, [r7, #92]	; 0x5c
 8002276:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002278:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 800227c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800227e:	0198      	lsls	r0, r3, #6
 8002280:	65b8      	str	r0, [r7, #88]	; 0x58
 8002282:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8002286:	1aed      	subs	r5, r5, r3
 8002288:	eb66 0604 	sbc.w	r6, r6, r4
 800228c:	4633      	mov	r3, r6
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	657b      	str	r3, [r7, #84]	; 0x54
 8002292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002294:	4628      	mov	r0, r5
 8002296:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800229a:	657b      	str	r3, [r7, #84]	; 0x54
 800229c:	462b      	mov	r3, r5
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	653b      	str	r3, [r7, #80]	; 0x50
 80022a2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80022a6:	461d      	mov	r5, r3
 80022a8:	4626      	mov	r6, r4
 80022aa:	186b      	adds	r3, r5, r1
 80022ac:	eb46 0402 	adc.w	r4, r6, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	4621      	mov	r1, r4
 80022b4:	460b      	mov	r3, r1
 80022b6:	025b      	lsls	r3, r3, #9
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	4602      	mov	r2, r0
 80022be:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c4:	4603      	mov	r3, r0
 80022c6:	025b      	lsls	r3, r3, #9
 80022c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80022ca:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80022ce:	4618      	mov	r0, r3
 80022d0:	4621      	mov	r1, r4
 80022d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d4:	f04f 0400 	mov.w	r4, #0
 80022d8:	461a      	mov	r2, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	f7fd ff92 	bl	8000204 <__aeabi_uldivmod>
 80022e0:	4603      	mov	r3, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022e6:	e04d      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e8:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	f04f 0400 	mov.w	r4, #0
 80022f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	ea01 0103 	and.w	r1, r1, r3
 80022fe:	ea02 0204 	and.w	r2, r2, r4
 8002302:	460b      	mov	r3, r1
 8002304:	4614      	mov	r4, r2
 8002306:	0160      	lsls	r0, r4, #5
 8002308:	6478      	str	r0, [r7, #68]	; 0x44
 800230a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800230c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002310:	6478      	str	r0, [r7, #68]	; 0x44
 8002312:	015b      	lsls	r3, r3, #5
 8002314:	643b      	str	r3, [r7, #64]	; 0x40
 8002316:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800231a:	1a5b      	subs	r3, r3, r1
 800231c:	eb64 0402 	sbc.w	r4, r4, r2
 8002320:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8002324:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8002328:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 800232c:	ebba 0a03 	subs.w	sl, sl, r3
 8002330:	eb6b 0b04 	sbc.w	fp, fp, r4
 8002334:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002342:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
 8002348:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800234c:	eb1a 0a01 	adds.w	sl, sl, r1
 8002350:	eb4b 0b02 	adc.w	fp, fp, r2
 8002354:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
 800235a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235c:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
 8002362:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
 8002368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800236c:	4650      	mov	r0, sl
 800236e:	4659      	mov	r1, fp
 8002370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002372:	f04f 0400 	mov.w	r4, #0
 8002376:	461a      	mov	r2, r3
 8002378:	4623      	mov	r3, r4
 800237a:	f7fd ff43 	bl	8000204 <__aeabi_uldivmod>
 800237e:	4603      	mov	r3, r0
 8002380:	460c      	mov	r4, r1
 8002382:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	3301      	adds	r3, #1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8002394:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800239e:	e0b4      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a0:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a8:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d054      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b6:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	ea01 0103 	and.w	r1, r1, r3
 80023cc:	ea02 0204 	and.w	r2, r2, r4
 80023d0:	460b      	mov	r3, r1
 80023d2:	4614      	mov	r4, r2
 80023d4:	0160      	lsls	r0, r4, #5
 80023d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80023d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023da:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80023de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80023e0:	015b      	lsls	r3, r3, #5
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80023e8:	1a5b      	subs	r3, r3, r1
 80023ea:	eb64 0402 	sbc.w	r4, r4, r2
 80023ee:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80023f2:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80023f6:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80023fa:	ebb8 0803 	subs.w	r8, r8, r3
 80023fe:	eb69 0904 	sbc.w	r9, r9, r4
 8002402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
 8002410:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800241a:	eb18 0801 	adds.w	r8, r8, r1
 800241e:	eb49 0902 	adc.w	r9, r9, r2
 8002422:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800243a:	4640      	mov	r0, r8
 800243c:	4649      	mov	r1, r9
 800243e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002440:	f04f 0400 	mov.w	r4, #0
 8002444:	461a      	mov	r2, r3
 8002446:	4623      	mov	r3, r4
 8002448:	f7fd fedc 	bl	8000204 <__aeabi_uldivmod>
 800244c:	4603      	mov	r3, r0
 800244e:	460c      	mov	r4, r1
 8002450:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002452:	e04b      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x338>
 8002454:	40023800 	.word	0x40023800
 8002458:	00f42400 	.word	0x00f42400
 800245c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_RCC_GetSysClockFreq+0x364>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	099b      	lsrs	r3, r3, #6
 8002466:	f04f 0400 	mov.w	r4, #0
 800246a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	ea01 0103 	and.w	r1, r1, r3
 8002476:	ea02 0204 	and.w	r2, r2, r4
 800247a:	460b      	mov	r3, r1
 800247c:	4614      	mov	r4, r2
 800247e:	0160      	lsls	r0, r4, #5
 8002480:	6178      	str	r0, [r7, #20]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002488:	6178      	str	r0, [r7, #20]
 800248a:	015b      	lsls	r3, r3, #5
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002492:	1a5b      	subs	r3, r3, r1
 8002494:	eb64 0402 	sbc.w	r4, r4, r2
 8002498:	01a6      	lsls	r6, r4, #6
 800249a:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800249e:	019d      	lsls	r5, r3, #6
 80024a0:	1aed      	subs	r5, r5, r3
 80024a2:	eb66 0604 	sbc.w	r6, r6, r4
 80024a6:	00f3      	lsls	r3, r6, #3
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	00eb      	lsls	r3, r5, #3
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80024ba:	186d      	adds	r5, r5, r1
 80024bc:	eb46 0602 	adc.w	r6, r6, r2
 80024c0:	02b3      	lsls	r3, r6, #10
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	02ab      	lsls	r3, r5, #10
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80024d4:	4628      	mov	r0, r5
 80024d6:	4631      	mov	r1, r6
 80024d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024da:	f04f 0400 	mov.w	r4, #0
 80024de:	461a      	mov	r2, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	f7fd fe8f 	bl	8000204 <__aeabi_uldivmod>
 80024e6:	4603      	mov	r3, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_RCC_GetSysClockFreq+0x364>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0f1b      	lsrs	r3, r3, #28
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 80024f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80024fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8002502:	e002      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetSysClockFreq+0x368>)
 8002506:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8002508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 800250c:	4618      	mov	r0, r3
 800250e:	3784      	adds	r7, #132	; 0x84
 8002510:	46bd      	mov	sp, r7
 8002512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	00f42400 	.word	0x00f42400

08002520 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e28d      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8083 	beq.w	8002646 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002540:	4b94      	ldr	r3, [pc, #592]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b04      	cmp	r3, #4
 800254a:	d019      	beq.n	8002580 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800254c:	4b91      	ldr	r3, [pc, #580]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002554:	2b08      	cmp	r3, #8
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002558:	4b8e      	ldr	r3, [pc, #568]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002564:	d00c      	beq.n	8002580 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002566:	4b8b      	ldr	r3, [pc, #556]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d112      	bne.n	8002598 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002572:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800257e:	d10b      	bne.n	8002598 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	4b84      	ldr	r3, [pc, #528]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d05b      	beq.n	8002644 <HAL_RCC_OscConfig+0x124>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d157      	bne.n	8002644 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e25a      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x90>
 80025a2:	4a7c      	ldr	r2, [pc, #496]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025a4:	4b7b      	ldr	r3, [pc, #492]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xcc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0xb4>
 80025ba:	4a76      	ldr	r2, [pc, #472]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025bc:	4b75      	ldr	r3, [pc, #468]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4a73      	ldr	r2, [pc, #460]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025c8:	4b72      	ldr	r3, [pc, #456]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xcc>
 80025d4:	4a6f      	ldr	r2, [pc, #444]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025d6:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4a6c      	ldr	r2, [pc, #432]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025e2:	4b6c      	ldr	r3, [pc, #432]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fba4 	bl	8000d40 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fba0 	bl	8000d40 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e21f      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b61      	ldr	r3, [pc, #388]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xdc>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fb90 	bl	8000d40 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe fb8c 	bl	8000d40 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e20b      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b57      	ldr	r3, [pc, #348]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x104>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d06f      	beq.n	8002732 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002652:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d017      	beq.n	800268e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800265e:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002666:	2b08      	cmp	r3, #8
 8002668:	d105      	bne.n	8002676 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800266a:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d11c      	bne.n	80026bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002682:	4b44      	ldr	r3, [pc, #272]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d116      	bne.n	80026bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x186>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e1d3      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	493b      	ldr	r1, [pc, #236]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	e03a      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <HAL_RCC_OscConfig+0x278>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fb39 	bl	8000d40 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d2:	f7fe fb35 	bl	8000d40 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1b4      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4928      	ldr	r1, [pc, #160]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80026f2:	4b28      	ldr	r3, [pc, #160]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x278>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fb18 	bl	8000d40 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fb14 	bl	8000d40 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e193      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d036      	beq.n	80027ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCC_OscConfig+0x27c>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe faf8 	bl	8000d40 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002754:	f7fe faf4 	bl	8000d40 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e173      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x234>
 8002772:	e01b      	b.n	80027ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_OscConfig+0x27c>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7fe fae1 	bl	8000d40 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	e00e      	b.n	80027a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002782:	f7fe fadd 	bl	8000d40 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d907      	bls.n	80027a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e15c      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
 8002794:	40023800 	.word	0x40023800
 8002798:	42470000 	.word	0x42470000
 800279c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	4b8a      	ldr	r3, [pc, #552]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ea      	bne.n	8002782 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8097 	beq.w	80028e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027be:	4b83      	ldr	r3, [pc, #524]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	4a7f      	ldr	r2, [pc, #508]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027d0:	4b7e      	ldr	r3, [pc, #504]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b7c      	ldr	r3, [pc, #496]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <HAL_RCC_OscConfig+0x4b0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4a76      	ldr	r2, [pc, #472]	; (80029d0 <HAL_RCC_OscConfig+0x4b0>)
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCC_OscConfig+0x4b0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7fe fa9d 	bl	8000d40 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7fe fa99 	bl	8000d40 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e118      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b6c      	ldr	r3, [pc, #432]	; (80029d0 <HAL_RCC_OscConfig+0x4b0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x31e>
 8002830:	4a66      	ldr	r2, [pc, #408]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002832:	4b66      	ldr	r3, [pc, #408]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6713      	str	r3, [r2, #112]	; 0x70
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x358>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x340>
 8002846:	4a61      	ldr	r2, [pc, #388]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002848:	4b60      	ldr	r3, [pc, #384]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
 8002852:	4a5e      	ldr	r2, [pc, #376]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002854:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0x358>
 8002860:	4a5a      	ldr	r2, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002862:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	4a57      	ldr	r2, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 800286e:	4b57      	ldr	r3, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe fa5e 	bl	8000d40 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe fa5a 	bl	8000d40 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0d7      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289e:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ee      	beq.n	8002888 <HAL_RCC_OscConfig+0x368>
 80028aa:	e014      	b.n	80028d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fe fa48 	bl	8000d40 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe fa44 	bl	8000d40 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0c1      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1ee      	bne.n	80028b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028dc:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80ad 	beq.w	8002a4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d060      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d145      	bne.n	8002992 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_RCC_OscConfig+0x4b4>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fa18 	bl	8000d40 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fa14 	bl	8000d40 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e093      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002932:	4926      	ldr	r1, [pc, #152]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	019b      	lsls	r3, r3, #6
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	3b01      	subs	r3, #1
 800294e:	041b      	lsls	r3, r3, #16
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	071b      	lsls	r3, r3, #28
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x4b4>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fe f9e9 	bl	8000d40 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe f9e5 	bl	8000d40 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e064      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x452>
 8002990:	e05c      	b.n	8002a4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCC_OscConfig+0x4b4>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe f9d2 	bl	8000d40 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe f9ce 	bl	8000d40 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e04d      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x480>
 80029be:	e045      	b.n	8002a4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e040      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_RCC_OscConfig+0x538>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d030      	beq.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d129      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d122      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d119      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10f      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800

08002a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e041      	b.n	8002af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f839 	bl	8002afa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 f9d8 	bl	8002e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d001      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e04e      	b.n	8002bc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	68d2      	ldr	r2, [r2, #12]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a23      	ldr	r2, [pc, #140]	; (8002bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d022      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x80>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b52:	d01d      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x80>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d018      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x80>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d013      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x80>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00e      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x80>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d009      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x80>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d004      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x80>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_TIM_Base_Start_IT+0xdc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d111      	bne.n	8002bb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d010      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb2:	e007      	b.n	8002bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40000c00 	.word	0x40000c00
 8002be4:	40010400 	.word	0x40010400
 8002be8:	40014000 	.word	0x40014000
 8002bec:	40001800 	.word	0x40001800

08002bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0202 	mvn.w	r2, #2
 8002c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8ee 	bl	8002e14 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8e0 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8f1 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0204 	mvn.w	r2, #4
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8c4 	bl	8002e14 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8b6 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f8c7 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0208 	mvn.w	r2, #8
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f89a 	bl	8002e14 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f88c 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f89d 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0210 	mvn.w	r2, #16
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f870 	bl	8002e14 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f862 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f873 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10e      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d107      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0201 	mvn.w	r2, #1
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fd fe08 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d10e      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d107      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f902 	bl	8002fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d10e      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d107      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f838 	bl	8002e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0220 	mvn.w	r2, #32
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f8cc 	bl	8002f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a40      	ldr	r2, [pc, #256]	; (8002f64 <TIM_Base_SetConfig+0x114>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6e:	d00f      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3d      	ldr	r2, [pc, #244]	; (8002f68 <TIM_Base_SetConfig+0x118>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3c      	ldr	r2, [pc, #240]	; (8002f6c <TIM_Base_SetConfig+0x11c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3b      	ldr	r2, [pc, #236]	; (8002f70 <TIM_Base_SetConfig+0x120>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0x40>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3a      	ldr	r2, [pc, #232]	; (8002f74 <TIM_Base_SetConfig+0x124>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d108      	bne.n	8002ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <TIM_Base_SetConfig+0x114>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02b      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb0:	d027      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2c      	ldr	r2, [pc, #176]	; (8002f68 <TIM_Base_SetConfig+0x118>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d023      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a2b      	ldr	r2, [pc, #172]	; (8002f6c <TIM_Base_SetConfig+0x11c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01f      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <TIM_Base_SetConfig+0x120>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01b      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <TIM_Base_SetConfig+0x124>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d017      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a28      	ldr	r2, [pc, #160]	; (8002f78 <TIM_Base_SetConfig+0x128>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <TIM_Base_SetConfig+0x12c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00f      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <TIM_Base_SetConfig+0x130>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00b      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a25      	ldr	r2, [pc, #148]	; (8002f84 <TIM_Base_SetConfig+0x134>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a24      	ldr	r2, [pc, #144]	; (8002f88 <TIM_Base_SetConfig+0x138>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d003      	beq.n	8002f02 <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <TIM_Base_SetConfig+0x13c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d108      	bne.n	8002f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <TIM_Base_SetConfig+0x114>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_Base_SetConfig+0xf8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <TIM_Base_SetConfig+0x124>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d103      	bne.n	8002f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	615a      	str	r2, [r3, #20]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800
 8002f70:	40000c00 	.word	0x40000c00
 8002f74:	40010400 	.word	0x40010400
 8002f78:	40014000 	.word	0x40014000
 8002f7c:	40014400 	.word	0x40014400
 8002f80:	40014800 	.word	0x40014800
 8002f84:	40001800 	.word	0x40001800
 8002f88:	40001c00 	.word	0x40001c00
 8002f8c:	40002000 	.word	0x40002000

08002f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <CAN_Tx>:
  * 		This parameter must be a number between Min_Data = 0 and Max_Data = 8.
  * @param  8-Bytes Frame that will be transmitted.
  * 		If the RTR is selected as CAN_RTR_REMOTE, it can be negligible.
  * @retval None
  */
void CAN_Tx(CAN_HandleTypeDef *hcan, uint32_t IDE, uint32_t StdId, uint32_t ExtId, uint32_t RTR, uint32_t DLC, uint8_t TxData[8]){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]

	TxHeader.IDE = IDE;
 8002fc6:	4a16      	ldr	r2, [pc, #88]	; (8003020 <CAN_Tx+0x68>)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6093      	str	r3, [r2, #8]
	TxHeader.RTR = RTR;
 8002fcc:	4a14      	ldr	r2, [pc, #80]	; (8003020 <CAN_Tx+0x68>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	60d3      	str	r3, [r2, #12]
	TxHeader.DLC = DLC;
 8002fd2:	4a13      	ldr	r2, [pc, #76]	; (8003020 <CAN_Tx+0x68>)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	6113      	str	r3, [r2, #16]
	if(TxHeader.IDE == CAN_ID_STD){
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <CAN_Tx+0x68>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <CAN_Tx+0x36>
		TxHeader.StdId = StdId;
 8002fe0:	4a0f      	ldr	r2, [pc, #60]	; (8003020 <CAN_Tx+0x68>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6013      	str	r3, [r2, #0]
		TxHeader.ExtId = 0;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <CAN_Tx+0x68>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	e009      	b.n	8003002 <CAN_Tx+0x4a>
	}
	else if(TxHeader.IDE == CAN_ID_EXT){
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <CAN_Tx+0x68>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d105      	bne.n	8003002 <CAN_Tx+0x4a>
		TxHeader.StdId = 0;
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <CAN_Tx+0x68>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
		TxHeader.ExtId = ExtId;
 8002ffc:	4a08      	ldr	r2, [pc, #32]	; (8003020 <CAN_Tx+0x68>)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6053      	str	r3, [r2, #4]
	}

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &pTxMailbox) != HAL_OK)
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <CAN_Tx+0x6c>)
 8003004:	6a3a      	ldr	r2, [r7, #32]
 8003006:	4906      	ldr	r1, [pc, #24]	; (8003020 <CAN_Tx+0x68>)
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f7fe f8c3 	bl	8001194 <HAL_CAN_AddTxMessage>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <CAN_Tx+0x60>
    {
      Error_Handler();
 8003014:	f7fd fbdc 	bl	80007d0 <Error_Handler>
    }
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000090 	.word	0x20000090
 8003024:	20000054 	.word	0x20000054

08003028 <CAN_Start>:
  * @brief Start the CAN modules.
  * @param hcan pointer to a CAN_HandleTypeDef structure that contains
  *        the configuration information for the specified CAN.
  * @retval None
  */
void CAN_Start(CAN_HandleTypeDef *hcan){
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_Start(hcan) != HAL_OK)
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fe f86b 	bl	800110c <HAL_CAN_Start>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <CAN_Start+0x18>
	{
	  Error_Handler();
 800303c:	f7fd fbc8 	bl	80007d0 <Error_Handler>
	}

}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <CAN_Rx>:
  * @param hcan pointer to a CAN_HandleTypeDef structure that contains
  *        the configuration information for the specified CAN.
  * @param This parameter can be CAN Receive FIFO Number.
  * @retval None
  */
void CAN_Rx(CAN_HandleTypeDef *hcan, uint32_t RxFifo){
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]

	if (HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxData) != HAL_OK)
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <CAN_Rx+0x28>)
 8003054:	4a07      	ldr	r2, [pc, #28]	; (8003074 <CAN_Rx+0x2c>)
 8003056:	6839      	ldr	r1, [r7, #0]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7fe f972 	bl	8001342 <HAL_CAN_GetRxMessage>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <CAN_Rx+0x20>
	{
	  Error_Handler();
 8003064:	f7fd fbb4 	bl	80007d0 <Error_Handler>
	}

}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000060 	.word	0x20000060
 8003074:	200000a8 	.word	0x200000a8

08003078 <CAN_FilterConfig>:
  * 		according to the mode (LSBs for a 32-bit configuration,
  * 		second one for a 16-bit configuration).
  * 		This parameter must be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF.
  * @retval None
  */
void CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint32_t FilterIDE, uint32_t FilterActivation, uint32_t FilterBank, uint32_t FilterFIFOAssignment, uint32_t FilterMode, uint32_t FilterScale, uint32_t SlaveStartFilterBank, uint32_t FilterIdHigh, uint32_t FilterIdLow, uint32_t FilterMaskIdHigh, uint32_t FilterMaskIdLow){
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]

	sFilterConfig.FilterActivation = FilterActivation;
 8003086:	4a26      	ldr	r2, [pc, #152]	; (8003120 <CAN_FilterConfig+0xa8>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6213      	str	r3, [r2, #32]
	sFilterConfig.FilterBank = FilterBank;
 800308c:	4a24      	ldr	r2, [pc, #144]	; (8003120 <CAN_FilterConfig+0xa8>)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6153      	str	r3, [r2, #20]
	sFilterConfig.FilterFIFOAssignment = FilterFIFOAssignment;
 8003092:	4a23      	ldr	r2, [pc, #140]	; (8003120 <CAN_FilterConfig+0xa8>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterMode = FilterMode;
 8003098:	4a21      	ldr	r2, [pc, #132]	; (8003120 <CAN_FilterConfig+0xa8>)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	6193      	str	r3, [r2, #24]
	sFilterConfig.FilterScale = FilterScale;
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <CAN_FilterConfig+0xa8>)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	61d3      	str	r3, [r2, #28]
	sFilterConfig.SlaveStartFilterBank = SlaveStartFilterBank;
 80030a4:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <CAN_FilterConfig+0xa8>)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	6253      	str	r3, [r2, #36]	; 0x24

	if(FilterIDE == CAN_ID_STD){
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d110      	bne.n	80030d2 <CAN_FilterConfig+0x5a>
		sFilterConfig.FilterIdHigh = FilterIdHigh << 5;
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	015b      	lsls	r3, r3, #5
 80030b4:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <CAN_FilterConfig+0xa8>)
 80030b6:	6013      	str	r3, [r2, #0]
		sFilterConfig.FilterIdLow = FilterIdLow << 5;
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	015b      	lsls	r3, r3, #5
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <CAN_FilterConfig+0xa8>)
 80030be:	6053      	str	r3, [r2, #4]
		sFilterConfig.FilterMaskIdHigh = FilterMaskIdHigh << 5;
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	015b      	lsls	r3, r3, #5
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <CAN_FilterConfig+0xa8>)
 80030c6:	6093      	str	r3, [r2, #8]
		sFilterConfig.FilterMaskIdLow = FilterMaskIdLow << 5;
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	015b      	lsls	r3, r3, #5
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <CAN_FilterConfig+0xa8>)
 80030ce:	60d3      	str	r3, [r2, #12]
 80030d0:	e019      	b.n	8003106 <CAN_FilterConfig+0x8e>
	}
	else if(FilterIDE == CAN_ID_EXT && FilterScale == CAN_FILTERSCALE_32BIT){
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d116      	bne.n	8003106 <CAN_FilterConfig+0x8e>
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d113      	bne.n	8003106 <CAN_FilterConfig+0x8e>
		sFilterConfig.FilterIdHigh = FilterIdHigh >> 13;
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	0b5b      	lsrs	r3, r3, #13
 80030e2:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <CAN_FilterConfig+0xa8>)
 80030e4:	6013      	str	r3, [r2, #0]
		sFilterConfig.FilterIdLow = FilterIdLow << 3 | (0x0004);
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <CAN_FilterConfig+0xa8>)
 80030f0:	6053      	str	r3, [r2, #4]
		sFilterConfig.FilterMaskIdHigh = FilterMaskIdHigh >> 13;
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	0b5b      	lsrs	r3, r3, #13
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <CAN_FilterConfig+0xa8>)
 80030f8:	6093      	str	r3, [r2, #8]
		sFilterConfig.FilterMaskIdLow = FilterMaskIdLow << 3 | (0x0004);
 80030fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	4a07      	ldr	r2, [pc, #28]	; (8003120 <CAN_FilterConfig+0xa8>)
 8003104:	60d3      	str	r3, [r2, #12]
	}

	if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8003106:	4906      	ldr	r1, [pc, #24]	; (8003120 <CAN_FilterConfig+0xa8>)
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7fd ff1f 	bl	8000f4c <HAL_CAN_ConfigFilter>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <CAN_FilterConfig+0xa0>
	{
	  Error_Handler();
 8003114:	f7fd fb5c 	bl	80007d0 <Error_Handler>
	}

}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	2000002c 	.word	0x2000002c

08003124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800315c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003128:	480d      	ldr	r0, [pc, #52]	; (8003160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800312a:	490e      	ldr	r1, [pc, #56]	; (8003164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800312e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003130:	e002      	b.n	8003138 <LoopCopyDataInit>

08003132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003136:	3304      	adds	r3, #4

08003138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800313a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800313c:	d3f9      	bcc.n	8003132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313e:	4a0b      	ldr	r2, [pc, #44]	; (800316c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003140:	4c0b      	ldr	r4, [pc, #44]	; (8003170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003144:	e001      	b.n	800314a <LoopFillZerobss>

08003146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003148:	3204      	adds	r2, #4

0800314a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800314a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800314c:	d3fb      	bcc.n	8003146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800314e:	f7fd fdaf 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003152:	f000 f811 	bl	8003178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003156:	f7fd f9dd 	bl	8000514 <main>
  bx  lr    
 800315a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800315c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003164:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003168:	08003210 	.word	0x08003210
  ldr r2, =_sbss
 800316c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003170:	20000110 	.word	0x20000110

08003174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003174:	e7fe      	b.n	8003174 <ADC_IRQHandler>
	...

08003178 <__libc_init_array>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4e0d      	ldr	r6, [pc, #52]	; (80031b0 <__libc_init_array+0x38>)
 800317c:	4c0d      	ldr	r4, [pc, #52]	; (80031b4 <__libc_init_array+0x3c>)
 800317e:	1ba4      	subs	r4, r4, r6
 8003180:	10a4      	asrs	r4, r4, #2
 8003182:	2500      	movs	r5, #0
 8003184:	42a5      	cmp	r5, r4
 8003186:	d109      	bne.n	800319c <__libc_init_array+0x24>
 8003188:	4e0b      	ldr	r6, [pc, #44]	; (80031b8 <__libc_init_array+0x40>)
 800318a:	4c0c      	ldr	r4, [pc, #48]	; (80031bc <__libc_init_array+0x44>)
 800318c:	f000 f820 	bl	80031d0 <_init>
 8003190:	1ba4      	subs	r4, r4, r6
 8003192:	10a4      	asrs	r4, r4, #2
 8003194:	2500      	movs	r5, #0
 8003196:	42a5      	cmp	r5, r4
 8003198:	d105      	bne.n	80031a6 <__libc_init_array+0x2e>
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031a0:	4798      	blx	r3
 80031a2:	3501      	adds	r5, #1
 80031a4:	e7ee      	b.n	8003184 <__libc_init_array+0xc>
 80031a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031aa:	4798      	blx	r3
 80031ac:	3501      	adds	r5, #1
 80031ae:	e7f2      	b.n	8003196 <__libc_init_array+0x1e>
 80031b0:	08003208 	.word	0x08003208
 80031b4:	08003208 	.word	0x08003208
 80031b8:	08003208 	.word	0x08003208
 80031bc:	0800320c 	.word	0x0800320c

080031c0 <memset>:
 80031c0:	4402      	add	r2, r0
 80031c2:	4603      	mov	r3, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <_init>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	bf00      	nop
 80031d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d6:	bc08      	pop	{r3}
 80031d8:	469e      	mov	lr, r3
 80031da:	4770      	bx	lr

080031dc <_fini>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr
